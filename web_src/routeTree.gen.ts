/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as TagNameImport } from './routes/tag.$name'
import { Route as SeriesNameImport } from './routes/series.$name'
import { Route as PublisherNameImport } from './routes/publisher.$name'
import { Route as DirectorNameImport } from './routes/director.$name'
import { Route as ActorNameImport } from './routes/actor.$name'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const TagNameRoute = TagNameImport.update({
  id: '/tag/$name',
  path: '/tag/$name',
  getParentRoute: () => rootRoute,
} as any)

const SeriesNameRoute = SeriesNameImport.update({
  id: '/series/$name',
  path: '/series/$name',
  getParentRoute: () => rootRoute,
} as any)

const PublisherNameRoute = PublisherNameImport.update({
  id: '/publisher/$name',
  path: '/publisher/$name',
  getParentRoute: () => rootRoute,
} as any)

const DirectorNameRoute = DirectorNameImport.update({
  id: '/director/$name',
  path: '/director/$name',
  getParentRoute: () => rootRoute,
} as any)

const ActorNameRoute = ActorNameImport.update({
  id: '/actor/$name',
  path: '/actor/$name',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/actor/$name': {
      id: '/actor/$name'
      path: '/actor/$name'
      fullPath: '/actor/$name'
      preLoaderRoute: typeof ActorNameImport
      parentRoute: typeof rootRoute
    }
    '/director/$name': {
      id: '/director/$name'
      path: '/director/$name'
      fullPath: '/director/$name'
      preLoaderRoute: typeof DirectorNameImport
      parentRoute: typeof rootRoute
    }
    '/publisher/$name': {
      id: '/publisher/$name'
      path: '/publisher/$name'
      fullPath: '/publisher/$name'
      preLoaderRoute: typeof PublisherNameImport
      parentRoute: typeof rootRoute
    }
    '/series/$name': {
      id: '/series/$name'
      path: '/series/$name'
      fullPath: '/series/$name'
      preLoaderRoute: typeof SeriesNameImport
      parentRoute: typeof rootRoute
    }
    '/tag/$name': {
      id: '/tag/$name'
      path: '/tag/$name'
      fullPath: '/tag/$name'
      preLoaderRoute: typeof TagNameImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/actor/$name': typeof ActorNameRoute
  '/director/$name': typeof DirectorNameRoute
  '/publisher/$name': typeof PublisherNameRoute
  '/series/$name': typeof SeriesNameRoute
  '/tag/$name': typeof TagNameRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/actor/$name': typeof ActorNameRoute
  '/director/$name': typeof DirectorNameRoute
  '/publisher/$name': typeof PublisherNameRoute
  '/series/$name': typeof SeriesNameRoute
  '/tag/$name': typeof TagNameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/actor/$name': typeof ActorNameRoute
  '/director/$name': typeof DirectorNameRoute
  '/publisher/$name': typeof PublisherNameRoute
  '/series/$name': typeof SeriesNameRoute
  '/tag/$name': typeof TagNameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/actor/$name'
    | '/director/$name'
    | '/publisher/$name'
    | '/series/$name'
    | '/tag/$name'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/actor/$name'
    | '/director/$name'
    | '/publisher/$name'
    | '/series/$name'
    | '/tag/$name'
  id:
    | '__root__'
    | '/'
    | '/actor/$name'
    | '/director/$name'
    | '/publisher/$name'
    | '/series/$name'
    | '/tag/$name'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ActorNameRoute: typeof ActorNameRoute
  DirectorNameRoute: typeof DirectorNameRoute
  PublisherNameRoute: typeof PublisherNameRoute
  SeriesNameRoute: typeof SeriesNameRoute
  TagNameRoute: typeof TagNameRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ActorNameRoute: ActorNameRoute,
  DirectorNameRoute: DirectorNameRoute,
  PublisherNameRoute: PublisherNameRoute,
  SeriesNameRoute: SeriesNameRoute,
  TagNameRoute: TagNameRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/actor/$name",
        "/director/$name",
        "/publisher/$name",
        "/series/$name",
        "/tag/$name"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/actor/$name": {
      "filePath": "actor.$name.tsx"
    },
    "/director/$name": {
      "filePath": "director.$name.tsx"
    },
    "/publisher/$name": {
      "filePath": "publisher.$name.tsx"
    },
    "/series/$name": {
      "filePath": "series.$name.tsx"
    },
    "/tag/$name": {
      "filePath": "tag.$name.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
